<?php
/**
 * Valghalla mail module
 *
 * @file valghalla_mail.module
 *
 * @copyright 2012 OS2 - Offentligt Digitaliseringsfællesskab.
 * See README.md at https://github.com/os2web/valghalla_mail
 */

/**
 * Migration wrapper
 */
function _valghalla_helper_get_volunteer_info_params($params){
  return _valhalla_helper_get_volunteer_info_params($params);
}


/**
 * Implementation of hook_menu()
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 */
function valghalla_mail_menu() {
  $items['admin/valghalla/mails'] = array(
      'title' => 'Mails',
      'description' => 'Tilretning af standard mails.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('valghalla_mail_admin_valghalla_mails'),
      'access arguments' => array('administer valghalla'),
      'file' => 'valghalla_mail_admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => -4,
  );
  $items['admin/valghalla/mails/old'] = array(
    'title' => 'Mails',
    'description' => 'Tilretning af standard mails.',
    'page callback' => 'valghalla_mail_admin_valghalla_mails_old',
    'access arguments' => array('administer valghalla'),
    'file' => 'valghalla_mail_admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -4,
  );
  $items['admin/valghalla/sendmail'] = array(
      'title' => 'Send mails til frivillige',
      'description' => 'Her kan der udsendes mails til alle, eller udvalgte segmenter, af de frivillige.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('valghalla_mail_sendmail_form'),
      'access arguments' => array('administer valghalla'),
      'type' => MENU_LOCAL_TASK,
      'weight' => -5,
  );
  $items['valghalla_mail/ajax/view'] = array(
    'page callback' => 'valghalla_mail_ajax_view',
    'access arguments' => array('administer valghalla'),
  );

  return $items;
}

/**
 * implements hook_init()
 */
function valghalla_mail_init(){
  drupal_add_js(drupal_get_path('module', 'valghalla_mail') . '/js/valghalla_mail.js', 'file');
}
/**
 * Handles valghalla templated mail sendout.
 *
 * @param type $key
 * @param type $message
 * @param type $params
 */
function valghalla_mail_mail($key, &$message, $params) {
  $options = array();
  switch ($key) {
    case 'rsvp_reminder':
      $email = &drupal_static(__FUNCTION__ . 'rsvp_reminder', FALSE);
      if (!$email) {
        $email = new stdClass;
        module_load_include('inc', 'valghalla_mail', 'valghalla_mail_admin');
        $email->subject = variable_get('valghalla_rsvp_reminder_subject', _valghalla_volunteers_default_rsvp_reminder('subject'));
        $email->body = variable_get('valghalla_rsvp_reminder_body', _valghalla_volunteers_default_rsvp_reminder('body'));
      }
      $message['subject'] = t($email->subject, $params, $options);
      $message['body'][] = t($email->body, $params, $options);
      break;
    case 'rsvp':
      $email = &drupal_static(__FUNCTION__ . 'rsvp_email', FALSE);
      if (!$email) {
        module_load_include('inc', 'valghalla_mail', 'valghalla_mail_admin');
        $email = new stdClass;
        $email->subject = variable_get('valghalla_rsvp_email_subject', _valghalla_volunteers_default_rsvp_email('subject'));
        $email->body = variable_get('valghalla_rsvp_email_body', _valghalla_volunteers_default_rsvp_email('body'));
      }
      $message['subject'] = t($email->subject, $params, $options);
      $message['body'][] = t($email->body, $params, $options);
      break;
    case 'rsvp_confirm':
      $email = &drupal_static(__FUNCTION__ . 'rsvp_status', FALSE);
      if (!$email) {
        $email = new stdClass;
        module_load_include('inc', 'valghalla_mail', 'valghalla_mail_admin');
        if (in_array($params['rsvp_type'], array('yes', 'no', 'never'))) {
          $email->subject = variable_get('valghalla_rsvp_status_subject_' . $params['rsvp_type'], _valghalla_volunteers_default_rsvp_status('subject_' . $params['rsvp_type']));
          $email->body = variable_get('valghalla_rsvp_status_body_' . $params['rsvp_type'], _valghalla_volunteers_default_rsvp_status('body_' . $params['rsvp_type']));
        }
      }
      $message['subject'] = t($email->subject, $params, $options);
      $message['body'][] = t($email->body, $params, $options);
      break;
    case 'default':
      $message['subject'] = t($params['subject'], $params['replacements'], $options);
      $message['body'][] = t($params['message'], $params['replacements'], $options);
      break;
  }
}

/**
 * Implementation of hook_form for the send mail page.
 *
 * @return array
 */
function valghalla_mail_sendmail_form($form, $form_state) {
  if (isset($form_state['storage']['confirm'])) {
    $recipients = '';
    foreach($form_state['storage']['volunteer_params'] as $fc_id => $params){
      $no_email = '';
      if(!$params['!email']){
        $no_email = 'no-email-error';
      }
      $recipients .= '<a href="#" class="js-show-volunteer-mail ' .$no_email. '" id="' . $fc_id . '">' . $params['!name'] . '</a><br />';
    }

    $form['recipients'] = array(
      '#type' => 'item',
      '#weight' => 50,
      '#markup' => $recipients,
    );

    // ALSO do $form definition here. Your final submit handler (after user clicks Yes, I Confirm) will
    // only see $form_state info defined here. Form you create here passed as param1 to confirm_form
    return confirm_form($form,
      t('Er du sikker på du vil udsende mail til @count modtagere ?', array('@count' => $form_state['storage']['count'])),
      'admin/valghalla',
      'Mailens indhold:<br/><div class="well"><h3>' . $form_state['values']['subject'] . '</h3><div class="js-volunteer-mail well">' . nl2br($form_state['values']['body']) . '</div></div>',
      'Send!',
      'Afbryd'
    ); //Had better luck leaving off last param 'name'
  }

  module_load_include('inc', 'valghalla_volunteers');
  module_load_include('inc', 'valghalla_mail');

  // Get parties from Term objects.
  $taxonomy=taxonomy_vocabulary_machine_name_load('partier');

  foreach (taxonomy_get_tree($taxonomy->vid) as $tid => $term) {
    $parties[$term->tid] = $term->name;
  }

  // Elections
  $elections = db_select('node', 'n')
          ->fields('n', array('nid', 'title'))
          ->condition('type', 'election')
          ->execute()->fetchAllKeyed();


  // Polling stations
  $ps = db_select('node', 'n')
          ->fields('n', array('nid', 'title'))
          ->condition('type', 'polling_station')
          ->execute()->fetchAllKeyed();

  // Roles
  $roles= db_select('node', 'n')
          ->distinct()
          ->fields('n', array('nid', 'title'))
          ->condition('n.type', 'roles')
          ->execute()->fetchAllKeyed();

  $form['content'] = array(
      '#type' => 'fieldset',
      '#title' => 'Mail indhold',
  );
  $form['content']['subject'] = array(
      '#type' => 'textfield',
      '#title' => 'Emne',
      '#required' => TRUE,
  );
  $form['content']['body'] = array(
      '#type' => 'textarea',
      '#title' => 'Indhold',
      '#rows' => 15,
      '#required' => TRUE,
      '#suffix' => _valghalla_helper_get_volunteer_info_params('info'),
  );
  $form['recipents'] = array(
      '#type' => 'fieldset',
      '#title' => 'Modtagere',
      '#description' => t('Hold CTRL nede for at vælge flere. Ingen valgte vil sende til alle.'),
  );
  $form['recipents']['election'] = array(
      '#type' => 'select',
      '#title' => 'Valg',
      '#multiple' => true,
      '#options' => $elections,
      '#size' => 5,
      '#prefix' => '<div style="float:left;margin-right:2em">',
      '#suffix' => '</div>'
  );
  $form['recipents']['rsvp_status'] = array(
      '#type' => 'select',
      '#title' => 'RSVP Status',
      //'#multiple' => true,
      '#options' => array(
          '1' => t('Ja'),
          '2' => t('Nej'),
          '3' => t('Aldrig'),
          '0' => t('Ubesvaret'),
      ),
      '#size' => 5,
      '#prefix' => '<div style="float:left;margin-right:2em">',
      '#suffix' => '</div>',
      '#default_value' => 1,
  );
  $form['recipents']['roles'] = array(
      '#type' => 'select',
      '#title' => 'Frivillig type',
      '#multiple' => true,
      '#options' => $roles,
      '#size' => 5,
      '#prefix' => '<div style="float:left;margin-right:2em">',
      '#suffix' => '</div>'
  );
  $form['recipents']['party'] = array(
      '#type' => 'select',
      '#title' => 'Parti',
      '#multiple' => true,
      '#options' => $parties,
      '#size' => 5,
      '#prefix' => '<div style="float:left;margin-right:2em">',
      '#suffix' => '</div>'
  );
  $form['recipents']['polling_station'] = array(
      '#type' => 'select',
      '#title' => 'Valgsted',
      '#multiple' => true,
      '#options' => $ps,
      '#size' => 5,
      '#prefix' => '<div style="float:left;margin-right:2em">',
      '#suffix' => '</div>'
  );
  $form['sender'] = array(
      '#type' => 'fieldset',
      '#title' => 'Afsender',
  );
  $form['sender']['email_sender'] = array(
      '#type' => 'checkbox',
      '#title' => "brug min egen mail",
      '#description' => "Denne vil også bruges som svar-til email, så svar fra modtageren sendes til den pågældende e-mailadresse. ",
      '#default_value' => 0,
  );
  global $user;
  $form['sender']['user_email'] = array(
      '#type' => 'hidden',
      '#default_value' => $user->mail,
  );
  $form['send'] = array(
      '#type' => 'submit',
      '#value' => 'Send!',
  );
  return $form;
}

/**
 * Submit handler for mail form.
 */
function valghalla_mail_sendmail_form_submit($form, &$form_state) {
  global $language;

  module_load_include('inc', 'valghalla_volunteers');

  if (!isset($form_state['storage'])) {
    $volunteer_query = new EntityFieldQuery();
    $volunteer_query->entityCondition('entity_type', 'field_collection_item')
        ->entityCondition('bundle', 'field_electioninfo');

    $election = count($form_state['values']['election']) > 0 ? $form_state['values']['election'] : false;
    $rsvp_status = count($form_state['values']['rsvp_status']) > 0 ? $form_state['values']['rsvp_status'] : false;
    $roles = count($form_state['values']['roles']) > 0 ? $form_state['values']['roles'] : false;
    $party = count($form_state['values']['party']) > 0 ? $form_state['values']['party'] : false;
    $polling_station = count($form_state['values']['polling_station']) > 0 ? $form_state['values']['polling_station'] : false;

    if ($election) {
      $volunteer_query->fieldCondition('field_election', 'target_id', $election);
    }
    if ($rsvp_status) {
      $volunteer_query->fieldCondition('field_rsvp', 'value', $rsvp_status);
    }
    if ($roles) {
      $volunteer_query->fieldCondition('field_post_role', 'target_id', $roles);
    }
    if ($party) {
      $volunteer_query->fieldCondition('field_post_party', 'target_id', $party);
    }
    if ($polling_station) {
      $volunteer_query->fieldCondition('field_vlnt_station', 'target_id', $polling_station);
    }

    // Get the results
    $result = array_keys(array_shift($volunteer_query->execute()));
    $form_state['storage']['volunteer_fcids'] = $result;
  }

  if (!isset($form_state['storage']['confirm'])) {
    $form_state['storage']['confirm'] = TRUE; // this will cause the form to be rebuilt, entering the confirm part of the form
    $form_state['storage']['count'] = count($result);
    $form_state['storage']['body'] = $form_state['values']['body'];

    // We save the body text for use on the confirmaiton page.
    // Where the user can see the how the mail will look for the
    // recipients.
    variable_set('valghalla_mail_temp_store', nl2br($form_state['values']['body']));

    $form_state['storage']['subject'] = $form_state['values']['subject'];
    $form_state['storage']['volunteer_params'] = valghalla_mail_populate_info($form_state['storage']['volunteer_fcids']);
    $form_state['rebuild'] = TRUE; // along with this
    return;
  }

  valghalla_mail_send($form_state['storage']['volunteer_params'], $form_state);
}

/**
 * Mail preview AJAX page callback.
 *
 * Prints the message with the tokens replaced. As it would
 * look in the mail.
 */
function valghalla_mail_ajax_view($id) {
  $volunteer_fc = entity_load_single('field_collection_item', $id);

  $post_role = field_get_items('field_collection_item', $volunteer_fc, 'field_post_role');

  // If this is for the election start, we need to the the correct
  // invitation message.
  if(strstr($_SERVER['HTTP_REFERER'], 'election')){
    $message = variable_get('valghalla_mail_temp_store-'.$post_role[0]['target_id']);
  }
  else {
    $message = variable_get('valghalla_mail_temp_store');
  }
  $params = _valghalla_helper_get_token_values($volunteer_fc);
  print t($message, $params);
}

/**
 * Get replacement tokens.
 *
 * Retrieves the replacement tokens for the supplies fieldcollection
 * ids.
 */
function valghalla_mail_populate_info($fc_ids){
  $volunteers_params = array();
  $volunteer_fcs = entity_load('field_collection_item', $fc_ids);

  foreach ($volunteer_fcs as $volunteer_fc){
    $volunteers_params[$volunteer_fc->item_id] = _valghalla_helper_get_token_values($volunteer_fc);
  }
  return $volunteers_params;
}

/**
 * Send the mails and tokens to the mailhandler.
 */
function valghalla_mail_send($volunteers_params, $form_state){
  global $language;
  // We got our data, lets start spamming
  foreach ($volunteers_params as $volunteer_params) {
    $to = $volunteer_params['!email'];
    // Check if there is an email address.
    if ($to) {
      // Check if sender is set to user's own email.
      $mail_sender = $form_state['values']['email_sender'];
      if ($mail_sender) {
        $from = $form_state['values']['user_email'];
      }
      else {
        $from = variable_get('site_mail', 'admin@example.com');
      }

      $params = array(
          'message' => $form_state['storage']['body'],
          'subject' => $form_state['storage']['subject'],
          'replacements' => $volunteer_params,
      );
      drupal_mail('valghalla_mail', 'default', $to, $language, $params, $from, TRUE);
    }
    // If there isn't an emailaddress, set a message about it.
    else {
      drupal_set_message('Der kunne ikke sendes til: <a href="/node/' . $volunteer_params['nid'] . '">' . $volunteer_params['!name'] . '</a> ingen email addresse fundet');
    }
  }
  drupal_set_message('Mails udsendt.', 'status');
  drupal_goto('admin/valghalla');
}

/**
 * Send invitations, when election starts
 */
function valghalla_mail_send_invitation($volunteers_params){
  global $language;

  $roles = node_load_multiple(array(), array('type' => 'roles'));

  // Build array with message text.
  foreach ($roles as $role_node){
    $invitation_mail_field = field_get_items('node', $role_node, 'field_invitation_mail');
    $role_invitation_mail[$role_node->nid] = $invitation_mail_field[0]['value'];
  }

  // Loop over volunteers.
  foreach ($volunteers_params as $volunteer_params) {
    $to = $volunteer_params['!email'];
    // Check if there is an email address.
    if ($to) {
      $from = variable_get('site_mail', 'admin@example.com');

      $params = array(
          'message' => $role_invitation_mail[$volunteer_params['position_nid']],
          'subject' => variable_get('valghalla_election_invitation_subject', 'Invitation til deltagelse ved valg'),
          'replacements' => $volunteer_params,
      );
      drupal_mail('valghalla_mail', 'default', $to, $language, $params, $from, TRUE);
    }
    else {
      drupal_set_message('Der kunne ikke sendes til: <a href="/node/' . $volunteer_params['nid'] . '">' . $volunteer_params['!name'] . '</a> ingen email addresse fundet');
    }
  }
}
